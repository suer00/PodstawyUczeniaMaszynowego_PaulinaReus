# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eSWRKw259f9c9Gysy46CONydQmpcyszX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import math
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split

#zaczytaj dane z pliku csv
df_train = pd.read_csv("train.csv", sep = "," , encoding= 'utf-8')
#sprawdź liczbę kolumn i wierszy
df_train.shape
df_train.info()
#wyświetl część tabeli
df_train.head()
#usuń wiersze z duplikatami id
df_train.drop_duplicates(subset="ID", inplace=True)

#opisz statystyki danych
df_train.describe()
#zlicz różne wartości danych
for i in df_train.columns:
  print(df_train[i].value_counts())
  print('*'*50)
# pokaż liczności danych kategorycznych
sns.countplot(df_train['Credit_Score'])
#zastąp błędne dane

df_train.info()
#zmień dane na numeryczne
FeaturesToConvert = ['Age','Annual_Income','Num_of_Loan', 'Num_of_Delayed_Payment', 'Changed_Credit_Limit' ,'Outstanding_Debt',
                     'Amount_invested_monthly','Monthly_Balance']
# ale najpierw sprawdź czy nie ma błędów w danych
for feature in FeaturesToConvert:
  uniques = df_train[feature].unique()
  print('Feature:','\n', colored(feature, attrs =['bold']), '\n', uniques,'\n','--'*40,'\n')

# usuń zbędne znaki '-’ , '_'
for feature in FeaturesToConvert:
  df_train[feature] =df_train[feature].str.strip('-_')
# puste kolumny zastąp NAN
for feature in FeaturesToConvert:
  df_train[feature] = df_train[feature].replace({'':np.nan})
# zmien typ zmiennych ilościowych
for feature in FeaturesToConvert:
  df_train[feature] = df_train[feature].astype('float64')

#uzupełnij braki średnią
df_train['Monthly_Inhand_Salary']= df_train['Monthly_Inhand_Salary'].fillna(method='pad')

from sklearn.preprocessing import LabelEncoder
# stwórz obiekt enkodera
le = LabelEncoder()
df_train.Occupation = le.fit_transform(df_train.Occupation)
# sprawdź transformacje
df_train.head()

"""Kodowanie zmiennych kategorycznych"""

cols = ['Annual_Income', 'Monthly_Inhand_Salary', 'Num_Bank_Accounts',
       'Num_Credit_Card']
# Encode labels of multiple columns at once
df_train[cols] = df_train[cols].apply(LabelEncoder().fit_transform)
# Print head
df_train.head()